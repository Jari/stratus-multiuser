package {	import flash.display.MovieClip;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.events.NetStatusEvent;	import flash.events.MouseEvent;	public class StratusTest extends MovieClip	{		// stratus address, hosted by Adobe		private var connectUrl:String = "rtmfp://stratus.adobe.com";					// developer key, please insert your developer key here		private const DeveloperKey:String = "6eba48368603535cdae70f47-3af2c0eb7d54";					// please insert your webservice URL here for exchanging		private const WebServiceUrl:String = "rtmfp://stratus.adobe.com/6eba48368603535cdae70f47-3af2c0eb7d54/";			// this is the connection to stratus		private var netConnection:NetConnection;						// after connection to stratus, publish listener stream to wait for incoming call 		private var listenerStream:NetStream;				// caller's incoming stream that is connected to callee's listener stream		private var controlStream:NetStream;				// outgoing media stream (audio, video, text and some control messages)		private var outgoingStream:NetStream;				// incoming media stream (audio, video, text and some control messages)		private var incomingStream:NetStream;						// login/registration state machine		private var loginState:int;				private const LoginNotConnected:int = 0;		private const LoginConnecting:int = 1;		private const LoginConnected:int = 2;		private const LoginDisconnecting:int = 3;				// call state machine		private var callState:int;				private const CallNotReady:int = 0;		private const CallReady:int = 1;		private const CallCalling:int = 2;		private const CallRinging:int = 3;		private const CallEstablished:int = 4;		private const CallFailed:int = 5;				private var remoteName:String = "";				private var userName:String;				private var connectedUsers:Array;				public function StratusTest()		{			onConnect();		}				private function onConnect():void		{						netConnection = new NetConnection();			netConnection.addEventListener(NetStatusEvent.NET_STATUS, netConnectionHandler);			netConnection.connect(connectUrl + "/" + DeveloperKey);						btnConnect.addEventListener(MouseEvent.CLICK, onConnectRequest);			btnSend.addEventListener(MouseEvent.CLICK, onSend);				}				// sending text message		private function onSend(e:MouseEvent):void		{						var msg:String = sendTxt.text; 			if (msg.length != 0 && outgoingStream)			{				chatTxt.text += msg + "\n";				outgoingStream.send(userName, msg);				sendTxt.text = "";			}		}				private function onConnectRequest(e:MouseEvent):void		{			if(userNameInputTxt.text != "")			{				userName = userNameInputTxt.text;				connectToMaster(peerIdTxt.text);			}		}				private function connectToMaster(identity:String):void		{			// caller subsrcibes to callee's listener stream 			controlStream = new NetStream(netConnection, identity);			controlStream.addEventListener(NetStatusEvent.NET_STATUS, controlHandler);			controlStream.play("control");									// caller publishes media stream			outgoingStream = new NetStream(netConnection, NetStream.DIRECT_CONNECTIONS);			outgoingStream.addEventListener(NetStatusEvent.NET_STATUS, outgoingStreamHandler);			outgoingStream.publish("media-caller");						var o:Object = new Object			o.onPeerConnect = function(caller:NetStream):Boolean			{				statusTxt.appendText("Callee connecting to: " + caller.farID + "\n");          							return true; 			}			outgoingStream.client = o;																// caller subscribes to callee's media stream			incomingStream = new NetStream(netConnection, identity);			incomingStream.addEventListener(NetStatusEvent.NET_STATUS, incomingStreamHandler);			incomingStream.play("media-callee");									var i:Object = new Object;			i.onCallAccepted = function(callee:String):void			{									statusTxt.appendText("Call accepted by " + callee + "\n");			}						// Handles incoming messages			i.onIm = function(name:String, text:String):void			{				chatTxt.text += name + ": " + text + "\n";			}			incomingStream.client = i;					}				private function controlHandler(event:NetStatusEvent):void		{			statusTxt.appendText("Control event: " + event.info.code + "\n");		}				private function incomingStreamHandler(event:NetStatusEvent):void		{			statusTxt.appendText("Incoming stream event: " + event.info.code + "\n");		}				private function outgoingStreamHandler(event:NetStatusEvent):void		{			statusTxt.appendText("Outgoing stream event: " + event.info.code + "\n");        	switch (event.info.code)        	{        		case "NetStream.Play.Start":        				outgoingStream.send(userName, "Hello");        			break;        	}		}				private function setIncomingListener():void		{			// start the control stream that will listen to incoming calls			listenerStream = new NetStream(netConnection, NetStream.DIRECT_CONNECTIONS);			listenerStream.addEventListener(NetStatusEvent.NET_STATUS, listenerHandler);			listenerStream.publish("control");						var c:Object = new Object			c.onPeerConnect = function(caller:NetStream):Boolean			{				statusTxt.appendText("Caller connecting to listener stream: " + caller.farID + "\n");								// callee subscribes to media, to be able to get the remote user name				incomingStream = new NetStream(netConnection, caller.farID);				incomingStream.addEventListener(NetStatusEvent.NET_STATUS, incomingStreamHandler);				incomingStream.play("media-caller");				var i:Object = new Object;				i.onIncomingCall = function(caller:String):void				{					remoteName = caller;					statusTxt.appendText("Incoming call from: " + caller + "\n");						if(userNameInputTxt.text != "")					{													userName = userNameInputTxt.text;						acceptCall();					}								}				i.onIm = function(name:String, text:String):void				{					statusTxt.appendText("Test complete Registration\n");					chatTxt.appendText(name + ": " + text + "\n");				}				incomingStream.client = i;				return true;			}			listenerStream.client = c;			}		private function acceptCall():void		{									// callee publishes media			outgoingStream = new NetStream(netConnection, NetStream.DIRECT_CONNECTIONS);			outgoingStream.addEventListener(NetStatusEvent.NET_STATUS, outgoingStreamHandler);			outgoingStream.publish("media-callee");						var o:Object = new Object			o.onPeerConnect = function(caller:NetStream):Boolean			{				statusTxt.appendText("Caller connecting: " + caller.farID + "\n");							           							return true; 			}			outgoingStream.client = o;		}				private function listenerHandler(event:NetStatusEvent):void		{			statusTxt.appendText("Incoming Listener event: " + event.info.code + "\n");		}				private function netConnectionHandler(event:NetStatusEvent):void		{			//status("NetConnection event: " + event.info.code + "\n");						statusTxt.appendText("NetConnection event: " + event.info.code + "\n");			           	switch (event.info.code)           	{               	case "NetConnection.Connect.Success":               		statusTxt.appendText("Stratus Connection Successful\n");					statusTxt.appendText("Your Peer ID:\n");					statusTxt.appendText(netConnection.nearID + "\n");										setIncomingListener();                   	break;                   	                case "NetConnection.Connect.Closed":					trace("NetConnection.Connect.Closed");                    //loginState = LoginNotConnected;                    //callState = CallNotReady;                    break;                    	                case "NetStream.Connect.Success":					trace("NetStream.Connect.Success " + event.info.stream.farID);                    // we get this when other party connects to our control stream our outgoing stream                    //status("Connection from: " + event.info.stream.farID + "\n");                   	break;                    	                case "NetConnection.Connect.Failed":					trace("NetConnection.Connect.Failed");                    //status("Unable to connect to " + connectUrl + "\n");                    //loginState = LoginNotConnected;                    break;                    	                case "NetStream.Connect.Closed":					trace("NetStream.Connect.Closed");                    //onHangup();                    break;            }        }	}}